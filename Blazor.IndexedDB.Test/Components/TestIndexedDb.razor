@using System.ComponentModel
@using Blazor.IndexedDB.Test.Models
@using TG.Blazor.IndexedDB
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Text;
@implements IDisposable
@inject IndexedDBManager DbManager
@inject DbStore DbStore

    <div>
        <p><b>status:</b> @Message</p>
        <p><b>Db version:</b> @DbManager.CurrentVersion</p>
        <p><b>stores:</b> @StoreCounts</p>
    </div>
<div class="d-flex flex-row align-items-start">
    <div class="d-flex flex-column">
        <button class="btn btn-outline-primary m-4" @onclick="OpenDatabase">Open Database</button>
        <button class="btn btn-outline-primary m-4" @onclick="GetRecords">Get Records</button>
        <button class="btn btn-outline-primary m-4" @onclick="GetRecordsPaginated">Get Records Paginated</button>
        <button class="btn btn-outline-primary m-4" @onclick="UpdateStoreRecordCounts">Update Store Record Counts</button>
        <button class="btn btn-outline-primary m-4" @onclick="ClearStore">Clear Store</button>
        <button class="btn btn-outline-primary m-4" @onclick="DeleteDatabase">Delete Database</button>
        <button class="btn btn-outline-danger m-4" @onclick="Add130Records">Pre-populate Store</button>
        <div class="m-4 d-flex flex-row" >
            <button class="btn btn-outline-primary mr-2" @onclick="AddNewStore">Add New Store</button>
            <input type="text" placeholder="Enter new store name" @bind="NewStoreName" />
        </div>
      
    </div>

    <div class="d-flex, flex-column">
        <div class="m-4 border d-flex flex-column">
            <div class="m-4">
                <label>First Name</label> <input id="firstName" type="text" @bind="@CurrentPerson.FirstName" />
            </div>
            <div class="m-4">
                <label>Last Name</label> <input id="lastName" type="text" @bind="@CurrentPerson.LastName" />
            </div>
           
            <button class="btn btn-primary m-4" @onclick="AddRecord">Add/Update Record</button>
        </div>
    </div>

    <div class="d-flex flex-row flex-wrap mt-4">

        @foreach (var person in People)
        {

            <div class="card" style="margin-bottom:10px; margin-right: 10px; padding:5px; width:200px">
                <p>Id: @person.Id</p>
                <p>First Name: @person.FirstName</p>
                <p>Last Name: @person.LastName</p>
                <div>
                    <button class="btn btn-outline-primary" @onclick="(() => EditPerson(person.Id.Value))">Edit</button>
                    <button class="btn btn-outline-warning" @onclick="(() => DeleteRecord(person.Id.Value))">Delete</button>
                </div>
            </div>

        }

    </div>
</div>

@code
{
    string Message { get; set; }

    Person CurrentPerson { get; set; } = new Person();

    List<Person> People { get; set; } = new List<Person>();

    string NewStoreName { get; set; } = "";

    string StoreCounts { get; set; } = "";


    protected override void OnInitialized()
    {
        DbManager.ActionCompleted += OnIndexedDbNotification;
        StoreCounts = string.Join(", ", DbManager.Stores.Select(s => s.Name + ": 0"));
    }

    public void Dispose()
    {
        DbManager.ActionCompleted -= OnIndexedDbNotification;
    }

    protected async void OpenDatabase()
    {
        await DbManager.OpenDb();
        await DbManager.GetCurrentDbState();
        StateHasChanged();
    }



    protected List<string> GetIndexes()
    {
        return DbManager.Stores[0].Indexes.Select(idx => idx.Name).ToList();
    }

    protected async void GetRecords()
    {
        var results = await DbManager.GetRecords<Person>(DbManager.Stores[0].Name);
        if (results.Any())
        {
            People = results;
        }
        else
        {
            People.Clear();
            Message = "No Records found";
        }

        StateHasChanged();
    }
    
    protected async void GetRecordsPaginated()
    {
        const uint pageSize = 15;
        var results = new List<Person>();
        var personCount = (ulong) await DbManager.GetRecordsCount(DbManager.Stores[0].Name);
        for (var i = 0u; i < personCount; i += pageSize)
        {
            results.AddRange(await DbManager.GetRecords<Person>(DbManager.Stores[0].Name, pageSize, i));
        }

        if (results.Any())
        {
            People = results;
        }
        else
        {
            People.Clear();
            Message = "No Records found";
        }

        StateHasChanged();
    }

    protected async Task UpdateStoreRecordCounts()
    {
        var first = true;
        var sb = new StringBuilder();

        foreach (var store in DbManager.Stores)
        {
            if (!first)
                sb.Append(", ");

            first = false;
            sb.Append(store.Name);
            sb.Append(": ");
            sb.Append(await DbManager.GetRecordsCount(store.Name));
        }

        StoreCounts = sb.ToString();
    }

    protected async void Add130Records()
    {
        for (int i = 0; i < 129; i++)
        {
            var dummyRecord = new Person
            {
                FirstName = i.ToString(),
                LastName = i.ToString()
            };

            var storeRecord = new StoreRecord<Person>
            { Storename = DbManager.Stores[0].Name,
                Data = dummyRecord
            };
            await DbManager.AddRecord(storeRecord);

            this.Message = $"Records added {i}";

        }
    }

    protected async Task EditPerson(long id)
    {
        try
        {
            CurrentPerson = await DbManager.GetRecordById<long, Person>(DbManager.Stores[0].Name, id);
        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
        }
    }

    protected async void AddRecord()
    {
        var newRecord = new StoreRecord<Person>
        {
            Storename = DbManager.Stores[0].Name,
            Data = CurrentPerson
        };


        if (newRecord.Data.Id.HasValue)
        {
            await DbManager.UpdateRecord(newRecord);
        }
        else
        {
            await DbManager.AddRecord(newRecord);
        }

        CurrentPerson = new Person();

        GetRecords();
    }

    protected async Task DeleteRecord(long? id)
    {
        await DbManager.DeleteRecord(DbManager.Stores[0].Name, id);

        GetRecords();
    }

    protected async Task AddNewStore()
    {
        var newStoreSchema = new StoreSchema
        {
            Name = NewStoreName,
            PrimaryKey = new IndexSpec { Name = "id", KeyPath = "id", Auto = true },
        };

        await DbManager.AddNewStore(newStoreSchema);
        await DbManager.GetCurrentDbState();
    }

    protected async Task ClearStore()
    {
        await DbManager.ClearStore(DbManager.Stores[0].Name);
        GetRecords();
    }

    protected async Task DeleteDatabase()
    {
        await DbManager.DeleteDb(DbStore.DbName);
        People.Clear();
    }

    private void OnIndexedDbNotification(object sender, IndexedDBNotificationArgs args)
    {
        Message = args.Message;
    }

}
